/**
 * @name Spring Remote Code Execution (Spring4Shell)
 * @description Detects Spring calls that pass unsafe Plain-Old-Java-Objects (POJOs) in vulnerable versions
 * @problem.severity error
 * @precision high
 * @id java/spring-remote-code-execution
 * @tags security
 *       external/cwe/cwe-94
 *       CVE-2022-22965
 * 
 * Lead Author: Alvaro Munoz (@pwntester)
 * Co-Author: Jorge (@jorge_ctf)
 * Co-Author: Keith Hoodlet (@securingdev)
 * 
 */

import java
import semmle.code.java.frameworks.spring.SpringController

predicate vulnVersions(JarFile file) {
    exists(int index, int match |
      match = file.getImplementationVersion().splitAt(".", index).toInt() |
      // Spring4Shell vulnerability is not exploitable in certain Spring versions 5.2.20 and 5.3.18
      not (
        // Check first index of the file name as 5
        index = 0 and match = 5 and index = 1 and
        (
        // Check second index of the file name as 2 or 3
        // and check the third index of the file name as 20 or 18
          (match = 2 and index = 2 and match >= 20) or
          (match = 3 and index = 2 and match >= 18)
        )
      )
    )
}

predicate starterVulnVersions(JarFile file) {
    exists(int index, int match |
      match = file.getImplementationVersion().splitAt(".", index).toInt() |
      // Spring4Shell vulnerability is not exploitable in certain Spring Starter versions 2.5.12 and 2.6.6 
      not (
        // Check first index of the file name as 2
        index = 0 and match = 2 and index = 1 and
        (
        // Check second index of the file name as 5 or 6
        // and check the third index of the file name as 12 or 6
          (match = 5 and index = 2 and match >= 12) or
          (match = 6 and index = 2 and match >= 6)
        )
      )
    )
}

// Inspired by Paulino Calderon's Log4J CodeQL Query
// https://github.com/cldrn/codeql-queries/blob/master/log4j-injection.ql
predicate vulnSpringJarFile(JarFile file) {
    ( vulnVersions(file) and 
        (
            file.getBaseName().matches("%spring-beans%") or
            file.getBaseName().matches("%spring-core%") or
            file.getBaseName().matches("%spring-webflux%") or
            file.getBaseName().matches("%spring-webmvc%")
        )
    ) 
    or 
    ( starterVulnVersions(file) and 
        (
            file.getBaseName().matches("%spring-boot-starter-web%")
        )
    )
}

from SpringRequestMappingMethod m
where 
    (m.getAParameter().getType() instanceof SpringUntrustedDataType) and vulnSpringJarFile(_)
select m, "Vulnerable use of Spring versions for CVE-2022-22965; Check if Java version >= 9 to confirm exploitability."